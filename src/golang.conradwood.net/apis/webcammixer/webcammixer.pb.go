// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/webcammixer/webcammixer.proto
// DO NOT EDIT!

/*
Package webcammixer is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/webcammixer/webcammixer.proto

It has these top-level messages:
	Colour
	ImageStream
	VideoDeviceDef
	FrameStream
	LoopbackInfo
	IdleTextRequest
	URL
	CaptureDeviceList
	CaptureDevice
	CountdownRequest
	FrameProvider
	ChainConfig
	ChainConverter
	UserImageConverter
	SetTextRequest
	UserImageRequest
	ImageSource
	OverlayImageRequest
	DisplayTextRequest
*/
package webcammixer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ************************************ special userimage provider which does a chain of things to modify streams ******/
type ConverterType int32

const (
	ConverterType_UNDEFINED     ConverterType = 0
	ConverterType_WEBCAM        ConverterType = 1
	ConverterType_LABEL         ConverterType = 2
	ConverterType_EXT_BINARY    ConverterType = 3
	ConverterType_OVERLAY_IMAGE ConverterType = 4
)

var ConverterType_name = map[int32]string{
	0: "UNDEFINED",
	1: "WEBCAM",
	2: "LABEL",
	3: "EXT_BINARY",
	4: "OVERLAY_IMAGE",
}
var ConverterType_value = map[string]int32{
	"UNDEFINED":     0,
	"WEBCAM":        1,
	"LABEL":         2,
	"EXT_BINARY":    3,
	"OVERLAY_IMAGE": 4,
}

func (x ConverterType) String() string {
	return proto.EnumName(ConverterType_name, int32(x))
}
func (ConverterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Colour struct {
	Red   uint32 `protobuf:"varint,1,opt,name=Red" json:"Red,omitempty"`
	Green uint32 `protobuf:"varint,2,opt,name=Green" json:"Green,omitempty"`
	Blue  uint32 `protobuf:"varint,3,opt,name=Blue" json:"Blue,omitempty"`
}

func (m *Colour) Reset()                    { *m = Colour{} }
func (m *Colour) String() string            { return proto.CompactTextString(m) }
func (*Colour) ProtoMessage()               {}
func (*Colour) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Colour) GetRed() uint32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *Colour) GetGreen() uint32 {
	if m != nil {
		return m.Green
	}
	return 0
}

func (m *Colour) GetBlue() uint32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

// break down one or more images into transportable chunks
type ImageStream struct {
	NextImage bool   `protobuf:"varint,1,opt,name=NextImage" json:"NextImage,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ImageStream) Reset()                    { *m = ImageStream{} }
func (m *ImageStream) String() string            { return proto.CompactTextString(m) }
func (*ImageStream) ProtoMessage()               {}
func (*ImageStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ImageStream) GetNextImage() bool {
	if m != nil {
		return m.NextImage
	}
	return false
}

func (m *ImageStream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type VideoDeviceDef struct {
	VideoDeviceName string `protobuf:"bytes,1,opt,name=VideoDeviceName" json:"VideoDeviceName,omitempty"`
}

func (m *VideoDeviceDef) Reset()                    { *m = VideoDeviceDef{} }
func (m *VideoDeviceDef) String() string            { return proto.CompactTextString(m) }
func (*VideoDeviceDef) ProtoMessage()               {}
func (*VideoDeviceDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VideoDeviceDef) GetVideoDeviceName() string {
	if m != nil {
		return m.VideoDeviceName
	}
	return ""
}

// break down one or more frames into transportable chunks
type FrameStream struct {
	NextImage bool   `protobuf:"varint,1,opt,name=NextImage" json:"NextImage,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *FrameStream) Reset()                    { *m = FrameStream{} }
func (m *FrameStream) String() string            { return proto.CompactTextString(m) }
func (*FrameStream) ProtoMessage()               {}
func (*FrameStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FrameStream) GetNextImage() bool {
	if m != nil {
		return m.NextImage
	}
	return false
}

func (m *FrameStream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LoopbackInfo struct {
	DeviceName  string `protobuf:"bytes,1,opt,name=DeviceName" json:"DeviceName,omitempty"`
	Width       uint32 `protobuf:"varint,2,opt,name=Width" json:"Width,omitempty"`
	Height      uint32 `protobuf:"varint,3,opt,name=Height" json:"Height,omitempty"`
	PixelFormat uint32 `protobuf:"varint,4,opt,name=PixelFormat" json:"PixelFormat,omitempty"`
}

func (m *LoopbackInfo) Reset()                    { *m = LoopbackInfo{} }
func (m *LoopbackInfo) String() string            { return proto.CompactTextString(m) }
func (*LoopbackInfo) ProtoMessage()               {}
func (*LoopbackInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoopbackInfo) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *LoopbackInfo) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *LoopbackInfo) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LoopbackInfo) GetPixelFormat() uint32 {
	if m != nil {
		return m.PixelFormat
	}
	return 0
}

type IdleTextRequest struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *IdleTextRequest) Reset()                    { *m = IdleTextRequest{} }
func (m *IdleTextRequest) String() string            { return proto.CompactTextString(m) }
func (*IdleTextRequest) ProtoMessage()               {}
func (*IdleTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IdleTextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type URL struct {
	URL string `protobuf:"bytes,1,opt,name=URL" json:"URL,omitempty"`
}

func (m *URL) Reset()                    { *m = URL{} }
func (m *URL) String() string            { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()               {}
func (*URL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *URL) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type CaptureDeviceList struct {
	Devices []*CaptureDevice `protobuf:"bytes,1,rep,name=Devices" json:"Devices,omitempty"`
}

func (m *CaptureDeviceList) Reset()                    { *m = CaptureDeviceList{} }
func (m *CaptureDeviceList) String() string            { return proto.CompactTextString(m) }
func (*CaptureDeviceList) ProtoMessage()               {}
func (*CaptureDeviceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CaptureDeviceList) GetDevices() []*CaptureDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

type CaptureDevice struct {
	Device string `protobuf:"bytes,1,opt,name=Device" json:"Device,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Type   uint32 `protobuf:"varint,3,opt,name=Type" json:"Type,omitempty"`
}

func (m *CaptureDevice) Reset()                    { *m = CaptureDevice{} }
func (m *CaptureDevice) String() string            { return proto.CompactTextString(m) }
func (*CaptureDevice) ProtoMessage()               {}
func (*CaptureDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CaptureDevice) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *CaptureDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CaptureDevice) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CountdownRequest struct {
	Text    string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
	Seconds uint32 `protobuf:"varint,2,opt,name=Seconds" json:"Seconds,omitempty"`
}

func (m *CountdownRequest) Reset()                    { *m = CountdownRequest{} }
func (m *CountdownRequest) String() string            { return proto.CompactTextString(m) }
func (*CountdownRequest) ProtoMessage()               {}
func (*CountdownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CountdownRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CountdownRequest) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type FrameProvider struct {
	HumanReadableDesc string `protobuf:"bytes,1,opt,name=HumanReadableDesc" json:"HumanReadableDesc,omitempty"`
}

func (m *FrameProvider) Reset()                    { *m = FrameProvider{} }
func (m *FrameProvider) String() string            { return proto.CompactTextString(m) }
func (*FrameProvider) ProtoMessage()               {}
func (*FrameProvider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FrameProvider) GetHumanReadableDesc() string {
	if m != nil {
		return m.HumanReadableDesc
	}
	return ""
}

// ************************************ chain config ****************************************/
type ChainConfig struct {
	Converters []*ChainConverter `protobuf:"bytes,1,rep,name=Converters" json:"Converters,omitempty"`
}

func (m *ChainConfig) Reset()                    { *m = ChainConfig{} }
func (m *ChainConfig) String() string            { return proto.CompactTextString(m) }
func (*ChainConfig) ProtoMessage()               {}
func (*ChainConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ChainConfig) GetConverters() []*ChainConverter {
	if m != nil {
		return m.Converters
	}
	return nil
}

type ChainConverter struct {
	Reference string `protobuf:"bytes,1,opt,name=Reference" json:"Reference,omitempty"`
}

func (m *ChainConverter) Reset()                    { *m = ChainConverter{} }
func (m *ChainConverter) String() string            { return proto.CompactTextString(m) }
func (*ChainConverter) ProtoMessage()               {}
func (*ChainConverter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ChainConverter) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

type UserImageConverter struct {
	Type         ConverterType        `protobuf:"varint,1,opt,name=Type,enum=webcammixer.ConverterType" json:"Type,omitempty"`
	Text         string               `protobuf:"bytes,2,opt,name=Text" json:"Text,omitempty"`
	OverlayImage *OverlayImageRequest `protobuf:"bytes,4,opt,name=OverlayImage" json:"OverlayImage,omitempty"`
	Reference    string               `protobuf:"bytes,5,opt,name=Reference" json:"Reference,omitempty"`
	Device       *CaptureDevice       `protobuf:"bytes,6,opt,name=Device" json:"Device,omitempty"`
}

func (m *UserImageConverter) Reset()                    { *m = UserImageConverter{} }
func (m *UserImageConverter) String() string            { return proto.CompactTextString(m) }
func (*UserImageConverter) ProtoMessage()               {}
func (*UserImageConverter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UserImageConverter) GetType() ConverterType {
	if m != nil {
		return m.Type
	}
	return ConverterType_UNDEFINED
}

func (m *UserImageConverter) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *UserImageConverter) GetOverlayImage() *OverlayImageRequest {
	if m != nil {
		return m.OverlayImage
	}
	return nil
}

func (m *UserImageConverter) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *UserImageConverter) GetDevice() *CaptureDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

type SetTextRequest struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *SetTextRequest) Reset()                    { *m = SetTextRequest{} }
func (m *SetTextRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTextRequest) ProtoMessage()               {}
func (*SetTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SetTextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type UserImageRequest struct {
	Converters  []*UserImageConverter `protobuf:"bytes,1,rep,name=Converters" json:"Converters,omitempty"`
	ImageSource *ImageSource          `protobuf:"bytes,2,opt,name=ImageSource" json:"ImageSource,omitempty"`
}

func (m *UserImageRequest) Reset()                    { *m = UserImageRequest{} }
func (m *UserImageRequest) String() string            { return proto.CompactTextString(m) }
func (*UserImageRequest) ProtoMessage()               {}
func (*UserImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UserImageRequest) GetConverters() []*UserImageConverter {
	if m != nil {
		return m.Converters
	}
	return nil
}

func (m *UserImageRequest) GetImageSource() *ImageSource {
	if m != nil {
		return m.ImageSource
	}
	return nil
}

// it is either device, image or "fill"
type ImageSource struct {
	Device     *CaptureDevice       `protobuf:"bytes,1,opt,name=Device" json:"Device,omitempty"`
	Image      *OverlayImageRequest `protobuf:"bytes,2,opt,name=Image" json:"Image,omitempty"`
	FillColour *Colour              `protobuf:"bytes,3,opt,name=FillColour" json:"FillColour,omitempty"`
}

func (m *ImageSource) Reset()                    { *m = ImageSource{} }
func (m *ImageSource) String() string            { return proto.CompactTextString(m) }
func (*ImageSource) ProtoMessage()               {}
func (*ImageSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ImageSource) GetDevice() *CaptureDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *ImageSource) GetImage() *OverlayImageRequest {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImageSource) GetFillColour() *Colour {
	if m != nil {
		return m.FillColour
	}
	return nil
}

type OverlayImageRequest struct {
	XPos  uint32 `protobuf:"varint,1,opt,name=XPos" json:"XPos,omitempty"`
	YPos  uint32 `protobuf:"varint,2,opt,name=YPos" json:"YPos,omitempty"`
	Image []byte `protobuf:"bytes,3,opt,name=Image,proto3" json:"Image,omitempty"`
}

func (m *OverlayImageRequest) Reset()                    { *m = OverlayImageRequest{} }
func (m *OverlayImageRequest) String() string            { return proto.CompactTextString(m) }
func (*OverlayImageRequest) ProtoMessage()               {}
func (*OverlayImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *OverlayImageRequest) GetXPos() uint32 {
	if m != nil {
		return m.XPos
	}
	return 0
}

func (m *OverlayImageRequest) GetYPos() uint32 {
	if m != nil {
		return m.YPos
	}
	return 0
}

func (m *OverlayImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type DisplayTextRequest struct {
	ContinueCamera bool   `protobuf:"varint,1,opt,name=ContinueCamera" json:"ContinueCamera,omitempty"`
	MaxSeconds     uint32 `protobuf:"varint,2,opt,name=MaxSeconds" json:"MaxSeconds,omitempty"`
	Blink          bool   `protobuf:"varint,3,opt,name=Blink" json:"Blink,omitempty"`
	Text           string `protobuf:"bytes,4,opt,name=Text" json:"Text,omitempty"`
}

func (m *DisplayTextRequest) Reset()                    { *m = DisplayTextRequest{} }
func (m *DisplayTextRequest) String() string            { return proto.CompactTextString(m) }
func (*DisplayTextRequest) ProtoMessage()               {}
func (*DisplayTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DisplayTextRequest) GetContinueCamera() bool {
	if m != nil {
		return m.ContinueCamera
	}
	return false
}

func (m *DisplayTextRequest) GetMaxSeconds() uint32 {
	if m != nil {
		return m.MaxSeconds
	}
	return 0
}

func (m *DisplayTextRequest) GetBlink() bool {
	if m != nil {
		return m.Blink
	}
	return false
}

func (m *DisplayTextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Colour)(nil), "webcammixer.Colour")
	proto.RegisterType((*ImageStream)(nil), "webcammixer.ImageStream")
	proto.RegisterType((*VideoDeviceDef)(nil), "webcammixer.VideoDeviceDef")
	proto.RegisterType((*FrameStream)(nil), "webcammixer.FrameStream")
	proto.RegisterType((*LoopbackInfo)(nil), "webcammixer.LoopbackInfo")
	proto.RegisterType((*IdleTextRequest)(nil), "webcammixer.IdleTextRequest")
	proto.RegisterType((*URL)(nil), "webcammixer.URL")
	proto.RegisterType((*CaptureDeviceList)(nil), "webcammixer.CaptureDeviceList")
	proto.RegisterType((*CaptureDevice)(nil), "webcammixer.CaptureDevice")
	proto.RegisterType((*CountdownRequest)(nil), "webcammixer.CountdownRequest")
	proto.RegisterType((*FrameProvider)(nil), "webcammixer.FrameProvider")
	proto.RegisterType((*ChainConfig)(nil), "webcammixer.ChainConfig")
	proto.RegisterType((*ChainConverter)(nil), "webcammixer.ChainConverter")
	proto.RegisterType((*UserImageConverter)(nil), "webcammixer.UserImageConverter")
	proto.RegisterType((*SetTextRequest)(nil), "webcammixer.SetTextRequest")
	proto.RegisterType((*UserImageRequest)(nil), "webcammixer.UserImageRequest")
	proto.RegisterType((*ImageSource)(nil), "webcammixer.ImageSource")
	proto.RegisterType((*OverlayImageRequest)(nil), "webcammixer.OverlayImageRequest")
	proto.RegisterType((*DisplayTextRequest)(nil), "webcammixer.DisplayTextRequest")
	proto.RegisterEnum("webcammixer.ConverterType", ConverterType_name, ConverterType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WebCamMixer service

type WebCamMixerClient interface {
	// send one or more images to v4l
	SendImages(ctx context.Context, opts ...grpc.CallOption) (WebCamMixer_SendImagesClient, error)
	//
	// send one or more frames (that is images converted to v4l-out format) to v4l
	// no conversion will be done on this frame.
	// mostly useful for testing converters
	SendFrames(ctx context.Context, opts ...grpc.CallOption) (WebCamMixer_SendFramesClient, error)
	// connect to a LOCAL video device
	SendVideoDevice(ctx context.Context, in *VideoDeviceDef, opts ...grpc.CallOption) (*common.Void, error)
	// connect to any capture source
	SendFromCaptureDevice(ctx context.Context, in *CaptureDevice, opts ...grpc.CallOption) (*common.Void, error)
	// switch to "idle"
	SwitchToIdle(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// get loopback config info
	GetLoopbackInfo(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*LoopbackInfo, error)
	// set idle text
	SetIdleText(ctx context.Context, in *IdleTextRequest, opts ...grpc.CallOption) (*common.Void, error)
	// switch to images-client
	SwitchToLiveImages(ctx context.Context, in *URL, opts ...grpc.CallOption) (*common.Void, error)
	// get list of video devices
	GetCaptureDevices(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*CaptureDeviceList, error)
	// rpc display a message and countdown
	SetCountdown(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set a text that frequently changes
	SetUserImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*common.Void, error)
	// stop frequently changing stuff, go back to what it was before starting userimage
	StopUserImage(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// set a text for dynamic userimage stuff that frequently changes
	SetUserImageText(ctx context.Context, in *SetTextRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get current frameprovider
	GetCurrentProvider(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FrameProvider, error)
	// set a dynamic text just for a bit of time, using existing config if possible, e.g. with video overlay. ignored if nobody is watching
	DisplayText(ctx context.Context, in *DisplayTextRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set a dynamic overlay image
	DisplayOverlayImage(ctx context.Context, in *OverlayImageRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type webCamMixerClient struct {
	cc *grpc.ClientConn
}

func NewWebCamMixerClient(cc *grpc.ClientConn) WebCamMixerClient {
	return &webCamMixerClient{cc}
}

func (c *webCamMixerClient) SendImages(ctx context.Context, opts ...grpc.CallOption) (WebCamMixer_SendImagesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WebCamMixer_serviceDesc.Streams[0], c.cc, "/webcammixer.WebCamMixer/SendImages", opts...)
	if err != nil {
		return nil, err
	}
	x := &webCamMixerSendImagesClient{stream}
	return x, nil
}

type WebCamMixer_SendImagesClient interface {
	Send(*ImageStream) error
	CloseAndRecv() (*common.Void, error)
	grpc.ClientStream
}

type webCamMixerSendImagesClient struct {
	grpc.ClientStream
}

func (x *webCamMixerSendImagesClient) Send(m *ImageStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webCamMixerSendImagesClient) CloseAndRecv() (*common.Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webCamMixerClient) SendFrames(ctx context.Context, opts ...grpc.CallOption) (WebCamMixer_SendFramesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WebCamMixer_serviceDesc.Streams[1], c.cc, "/webcammixer.WebCamMixer/SendFrames", opts...)
	if err != nil {
		return nil, err
	}
	x := &webCamMixerSendFramesClient{stream}
	return x, nil
}

type WebCamMixer_SendFramesClient interface {
	Send(*FrameStream) error
	CloseAndRecv() (*common.Void, error)
	grpc.ClientStream
}

type webCamMixerSendFramesClient struct {
	grpc.ClientStream
}

func (x *webCamMixerSendFramesClient) Send(m *FrameStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webCamMixerSendFramesClient) CloseAndRecv() (*common.Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webCamMixerClient) SendVideoDevice(ctx context.Context, in *VideoDeviceDef, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SendVideoDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) SendFromCaptureDevice(ctx context.Context, in *CaptureDevice, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SendFromCaptureDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) SwitchToIdle(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SwitchToIdle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) GetLoopbackInfo(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*LoopbackInfo, error) {
	out := new(LoopbackInfo)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/GetLoopbackInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) SetIdleText(ctx context.Context, in *IdleTextRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SetIdleText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) SwitchToLiveImages(ctx context.Context, in *URL, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SwitchToLiveImages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) GetCaptureDevices(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*CaptureDeviceList, error) {
	out := new(CaptureDeviceList)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/GetCaptureDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) SetCountdown(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SetCountdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) SetUserImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SetUserImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) StopUserImage(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/StopUserImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) SetUserImageText(ctx context.Context, in *SetTextRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/SetUserImageText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) GetCurrentProvider(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*FrameProvider, error) {
	out := new(FrameProvider)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/GetCurrentProvider", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) DisplayText(ctx context.Context, in *DisplayTextRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/DisplayText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCamMixerClient) DisplayOverlayImage(ctx context.Context, in *OverlayImageRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/webcammixer.WebCamMixer/DisplayOverlayImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WebCamMixer service

type WebCamMixerServer interface {
	// send one or more images to v4l
	SendImages(WebCamMixer_SendImagesServer) error
	//
	// send one or more frames (that is images converted to v4l-out format) to v4l
	// no conversion will be done on this frame.
	// mostly useful for testing converters
	SendFrames(WebCamMixer_SendFramesServer) error
	// connect to a LOCAL video device
	SendVideoDevice(context.Context, *VideoDeviceDef) (*common.Void, error)
	// connect to any capture source
	SendFromCaptureDevice(context.Context, *CaptureDevice) (*common.Void, error)
	// switch to "idle"
	SwitchToIdle(context.Context, *common.Void) (*common.Void, error)
	// get loopback config info
	GetLoopbackInfo(context.Context, *common.Void) (*LoopbackInfo, error)
	// set idle text
	SetIdleText(context.Context, *IdleTextRequest) (*common.Void, error)
	// switch to images-client
	SwitchToLiveImages(context.Context, *URL) (*common.Void, error)
	// get list of video devices
	GetCaptureDevices(context.Context, *common.Void) (*CaptureDeviceList, error)
	// rpc display a message and countdown
	SetCountdown(context.Context, *CountdownRequest) (*common.Void, error)
	// set a text that frequently changes
	SetUserImage(context.Context, *UserImageRequest) (*common.Void, error)
	// stop frequently changing stuff, go back to what it was before starting userimage
	StopUserImage(context.Context, *common.Void) (*common.Void, error)
	// set a text for dynamic userimage stuff that frequently changes
	SetUserImageText(context.Context, *SetTextRequest) (*common.Void, error)
	// get current frameprovider
	GetCurrentProvider(context.Context, *common.Void) (*FrameProvider, error)
	// set a dynamic text just for a bit of time, using existing config if possible, e.g. with video overlay. ignored if nobody is watching
	DisplayText(context.Context, *DisplayTextRequest) (*common.Void, error)
	// set a dynamic overlay image
	DisplayOverlayImage(context.Context, *OverlayImageRequest) (*common.Void, error)
}

func RegisterWebCamMixerServer(s *grpc.Server, srv WebCamMixerServer) {
	s.RegisterService(&_WebCamMixer_serviceDesc, srv)
}

func _WebCamMixer_SendImages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebCamMixerServer).SendImages(&webCamMixerSendImagesServer{stream})
}

type WebCamMixer_SendImagesServer interface {
	SendAndClose(*common.Void) error
	Recv() (*ImageStream, error)
	grpc.ServerStream
}

type webCamMixerSendImagesServer struct {
	grpc.ServerStream
}

func (x *webCamMixerSendImagesServer) SendAndClose(m *common.Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webCamMixerSendImagesServer) Recv() (*ImageStream, error) {
	m := new(ImageStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WebCamMixer_SendFrames_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebCamMixerServer).SendFrames(&webCamMixerSendFramesServer{stream})
}

type WebCamMixer_SendFramesServer interface {
	SendAndClose(*common.Void) error
	Recv() (*FrameStream, error)
	grpc.ServerStream
}

type webCamMixerSendFramesServer struct {
	grpc.ServerStream
}

func (x *webCamMixerSendFramesServer) SendAndClose(m *common.Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webCamMixerSendFramesServer) Recv() (*FrameStream, error) {
	m := new(FrameStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WebCamMixer_SendVideoDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoDeviceDef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SendVideoDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SendVideoDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SendVideoDevice(ctx, req.(*VideoDeviceDef))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_SendFromCaptureDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SendFromCaptureDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SendFromCaptureDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SendFromCaptureDevice(ctx, req.(*CaptureDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_SwitchToIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SwitchToIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SwitchToIdle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SwitchToIdle(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_GetLoopbackInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).GetLoopbackInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/GetLoopbackInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).GetLoopbackInfo(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_SetIdleText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdleTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SetIdleText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SetIdleText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SetIdleText(ctx, req.(*IdleTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_SwitchToLiveImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SwitchToLiveImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SwitchToLiveImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SwitchToLiveImages(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_GetCaptureDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).GetCaptureDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/GetCaptureDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).GetCaptureDevices(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_SetCountdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SetCountdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SetCountdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SetCountdown(ctx, req.(*CountdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_SetUserImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SetUserImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SetUserImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SetUserImage(ctx, req.(*UserImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_StopUserImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).StopUserImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/StopUserImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).StopUserImage(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_SetUserImageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).SetUserImageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/SetUserImageText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).SetUserImageText(ctx, req.(*SetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_GetCurrentProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).GetCurrentProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/GetCurrentProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).GetCurrentProvider(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_DisplayText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).DisplayText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/DisplayText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).DisplayText(ctx, req.(*DisplayTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCamMixer_DisplayOverlayImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverlayImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCamMixerServer).DisplayOverlayImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcammixer.WebCamMixer/DisplayOverlayImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCamMixerServer).DisplayOverlayImage(ctx, req.(*OverlayImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebCamMixer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webcammixer.WebCamMixer",
	HandlerType: (*WebCamMixerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendVideoDevice",
			Handler:    _WebCamMixer_SendVideoDevice_Handler,
		},
		{
			MethodName: "SendFromCaptureDevice",
			Handler:    _WebCamMixer_SendFromCaptureDevice_Handler,
		},
		{
			MethodName: "SwitchToIdle",
			Handler:    _WebCamMixer_SwitchToIdle_Handler,
		},
		{
			MethodName: "GetLoopbackInfo",
			Handler:    _WebCamMixer_GetLoopbackInfo_Handler,
		},
		{
			MethodName: "SetIdleText",
			Handler:    _WebCamMixer_SetIdleText_Handler,
		},
		{
			MethodName: "SwitchToLiveImages",
			Handler:    _WebCamMixer_SwitchToLiveImages_Handler,
		},
		{
			MethodName: "GetCaptureDevices",
			Handler:    _WebCamMixer_GetCaptureDevices_Handler,
		},
		{
			MethodName: "SetCountdown",
			Handler:    _WebCamMixer_SetCountdown_Handler,
		},
		{
			MethodName: "SetUserImage",
			Handler:    _WebCamMixer_SetUserImage_Handler,
		},
		{
			MethodName: "StopUserImage",
			Handler:    _WebCamMixer_StopUserImage_Handler,
		},
		{
			MethodName: "SetUserImageText",
			Handler:    _WebCamMixer_SetUserImageText_Handler,
		},
		{
			MethodName: "GetCurrentProvider",
			Handler:    _WebCamMixer_GetCurrentProvider_Handler,
		},
		{
			MethodName: "DisplayText",
			Handler:    _WebCamMixer_DisplayText_Handler,
		},
		{
			MethodName: "DisplayOverlayImage",
			Handler:    _WebCamMixer_DisplayOverlayImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendImages",
			Handler:       _WebCamMixer_SendImages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendFrames",
			Handler:       _WebCamMixer_SendFrames_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/golang.conradwood.net/apis/webcammixer/webcammixer.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/webcammixer/webcammixer.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1093 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x59, 0x6f, 0xdb, 0x46,
	0x10, 0xae, 0x2c, 0x1f, 0xf1, 0x50, 0x92, 0xe5, 0x75, 0x0f, 0xd5, 0x4d, 0x13, 0x83, 0x68, 0x03,
	0x23, 0x2d, 0x64, 0x40, 0x09, 0x02, 0xd4, 0x49, 0xea, 0xea, 0xb2, 0xa3, 0x42, 0x3e, 0x40, 0xf9,
	0xec, 0x4b, 0xb0, 0x16, 0xc7, 0x36, 0x11, 0x92, 0xab, 0x2e, 0x57, 0x3e, 0x5e, 0xfa, 0xd8, 0xd7,
	0xfe, 0x93, 0xfe, 0x8b, 0xfe, 0x9f, 0xfe, 0x84, 0x62, 0x77, 0x29, 0x79, 0x97, 0x72, 0x1d, 0x23,
	0x4f, 0x9c, 0x99, 0x9d, 0x6b, 0xbf, 0x99, 0x9d, 0x21, 0x6c, 0x0c, 0x38, 0x13, 0x2c, 0x59, 0x3b,
	0x67, 0x21, 0x8d, 0xcf, 0xab, 0x7d, 0x16, 0x73, 0xea, 0x5f, 0x31, 0xe6, 0x57, 0x63, 0x14, 0x6b,
	0x74, 0x10, 0x24, 0x6b, 0x57, 0x78, 0xda, 0xa7, 0x51, 0x14, 0x5c, 0x23, 0x37, 0xe9, 0xaa, 0xb2,
	0x24, 0x8e, 0x21, 0x5a, 0xae, 0xde, 0xe3, 0xa6, 0xcf, 0xa2, 0x88, 0xc5, 0xe9, 0x47, 0x1b, 0xbb,
	0x2d, 0x98, 0x6d, 0xb2, 0x90, 0x0d, 0x39, 0x29, 0x43, 0xde, 0x43, 0xbf, 0x92, 0x5b, 0xc9, 0xad,
	0x16, 0x3d, 0x49, 0x92, 0xcf, 0x61, 0x66, 0x8b, 0x23, 0xc6, 0x95, 0x29, 0x25, 0xd3, 0x0c, 0x21,
	0x30, 0xdd, 0x08, 0x87, 0x58, 0xc9, 0x2b, 0xa1, 0xa2, 0xdd, 0x0d, 0x70, 0x3a, 0x11, 0x3d, 0xc7,
	0x9e, 0xe0, 0x48, 0x23, 0xf2, 0x18, 0xe6, 0x77, 0xf0, 0x5a, 0x28, 0x91, 0x72, 0xf8, 0xc8, 0xbb,
	0x15, 0x48, 0x07, 0x2d, 0x2a, 0xa8, 0xf2, 0x5a, 0xf0, 0x14, 0xed, 0xae, 0x43, 0xe9, 0x30, 0xf0,
	0x91, 0xb5, 0xf0, 0x32, 0xe8, 0x63, 0x0b, 0xcf, 0xc8, 0x2a, 0x2c, 0x18, 0x92, 0x1d, 0x1a, 0x69,
	0x4f, 0xf3, 0x5e, 0x56, 0x2c, 0x83, 0x6f, 0x72, 0x1a, 0x7d, 0x7a, 0xf0, 0x3f, 0xa0, 0xd0, 0x65,
	0x6c, 0x70, 0x4a, 0xfb, 0x1f, 0x3a, 0xf1, 0x19, 0x23, 0x4f, 0x00, 0x26, 0xa2, 0x1a, 0x12, 0x89,
	0xcb, 0x51, 0xe0, 0x8b, 0x8b, 0x11, 0x2e, 0x8a, 0x21, 0x5f, 0xc2, 0xec, 0x3b, 0x0c, 0xce, 0x2f,
	0x44, 0x8a, 0x4c, 0xca, 0x91, 0x15, 0x70, 0xf6, 0x82, 0x6b, 0x0c, 0x37, 0x19, 0x8f, 0xa8, 0xa8,
	0x4c, 0xab, 0x43, 0x53, 0xe4, 0x7e, 0x0f, 0x0b, 0x1d, 0x3f, 0xc4, 0x7d, 0xbc, 0x16, 0x1e, 0xfe,
	0x3e, 0xc4, 0x44, 0xc8, 0x34, 0x25, 0x9b, 0x06, 0x57, 0xb4, 0xfb, 0x15, 0xe4, 0x0f, 0xbc, 0xae,
	0xac, 0xd3, 0x81, 0xd7, 0x4d, 0x4f, 0x24, 0xe9, 0x76, 0x60, 0xb1, 0x49, 0x07, 0x62, 0xc8, 0x51,
	0x27, 0xd9, 0x0d, 0x12, 0x41, 0x5e, 0xc2, 0x9c, 0xe6, 0x92, 0x4a, 0x6e, 0x25, 0xbf, 0xea, 0xd4,
	0x96, 0xab, 0x66, 0xeb, 0x58, 0x06, 0xde, 0x48, 0xd5, 0xdd, 0x85, 0xa2, 0x75, 0x22, 0x6f, 0xa5,
	0xa9, 0x34, 0x60, 0xca, 0xc9, 0x04, 0x15, 0x3a, 0x53, 0x3a, 0x41, 0x85, 0x8b, 0x4c, 0xfa, 0x66,
	0x30, 0xee, 0x0c, 0x49, 0xbb, 0xbf, 0x40, 0xb9, 0xc9, 0x86, 0xb1, 0xf0, 0xd9, 0x55, 0x7c, 0xcf,
	0xe5, 0x48, 0x05, 0xe6, 0x7a, 0xd8, 0x67, 0xb1, 0x9f, 0xa4, 0xa8, 0x8e, 0x58, 0xf7, 0x2d, 0x14,
	0x55, 0x79, 0xf7, 0x38, 0xbb, 0x0c, 0x7c, 0xe4, 0xe4, 0x47, 0x58, 0x7c, 0x37, 0x8c, 0x68, 0xec,
	0x21, 0xf5, 0xe9, 0x69, 0x88, 0x2d, 0x4c, 0xfa, 0xa9, 0xaf, 0xc9, 0x03, 0xf7, 0x57, 0x70, 0x9a,
	0x17, 0x34, 0x88, 0x9b, 0x2c, 0x3e, 0x0b, 0xce, 0xc9, 0x6b, 0x80, 0x26, 0x8b, 0x2f, 0x91, 0x0b,
	0xe4, 0x23, 0x64, 0xbe, 0xb1, 0x91, 0x49, 0xb5, 0xb5, 0x8e, 0x67, 0xa8, 0xbb, 0x55, 0x28, 0xd9,
	0xa7, 0xb2, 0xd9, 0x3c, 0x3c, 0x43, 0x8e, 0xf1, 0x18, 0xa1, 0x5b, 0x81, 0xfb, 0x6f, 0x0e, 0xc8,
	0x41, 0x82, 0x5c, 0xb5, 0xde, 0xad, 0x51, 0x35, 0xc5, 0x49, 0xea, 0x97, 0xb2, 0x75, 0x19, 0x69,
	0x49, 0x0d, 0x8d, 0xe1, 0x18, 0xaf, 0x29, 0x03, 0xaf, 0x16, 0x14, 0x76, 0x2f, 0x91, 0x87, 0xf4,
	0x46, 0x37, 0xba, 0x6c, 0x2b, 0xa7, 0xb6, 0x62, 0xf9, 0x32, 0x15, 0x52, 0xec, 0x3d, 0xcb, 0xca,
	0x4e, 0x7f, 0x26, 0x93, 0x3e, 0xa9, 0x8d, 0x6b, 0x3f, 0xab, 0xbc, 0xdf, 0xd7, 0x41, 0xa9, 0xa6,
	0xfb, 0x1d, 0x94, 0x7a, 0x28, 0x3e, 0xd6, 0xca, 0x7f, 0xe5, 0xa0, 0x3c, 0x06, 0x66, 0xa4, 0xb8,
	0x71, 0x47, 0x69, 0x9e, 0x5a, 0x21, 0x27, 0xb1, 0x34, 0xcb, 0x43, 0xd6, 0x47, 0x53, 0x88, 0x0d,
	0x79, 0x5f, 0xb7, 0xa6, 0x53, 0xab, 0x58, 0x1e, 0x8c, 0x73, 0xcf, 0x54, 0x76, 0xff, 0xce, 0x59,
	0xc6, 0xc6, 0xdd, 0x73, 0x0f, 0xbd, 0x3b, 0x79, 0x05, 0x33, 0xba, 0x18, 0x53, 0x0f, 0x2c, 0x86,
	0x56, 0x27, 0x2f, 0x00, 0x36, 0x83, 0x30, 0xd4, 0x73, 0x58, 0xbd, 0x1e, 0xa7, 0xb6, 0x94, 0xe9,
	0x0a, 0x79, 0xe4, 0x19, 0x6a, 0x6e, 0x0f, 0x96, 0xee, 0x70, 0x29, 0xd1, 0x3e, 0xde, 0x63, 0x49,
	0x3a, 0xc6, 0x15, 0x2d, 0x65, 0x27, 0x52, 0xa6, 0x1f, 0x96, 0xa2, 0xe5, 0x0c, 0xd3, 0xb9, 0xe6,
	0xd5, 0x20, 0xd4, 0x8c, 0xfb, 0x67, 0x0e, 0x48, 0x2b, 0x48, 0x06, 0x21, 0xbd, 0x31, 0x4b, 0xf8,
	0x0c, 0x4a, 0x4d, 0x16, 0x8b, 0x20, 0x1e, 0x62, 0x93, 0x46, 0xc8, 0x69, 0x3a, 0x57, 0x33, 0x52,
	0x39, 0x38, 0xb7, 0xe9, 0xb5, 0xfd, 0x8e, 0x0d, 0x89, 0x0c, 0xda, 0x08, 0x83, 0xf8, 0x83, 0x0a,
	0xfa, 0xc8, 0xd3, 0xcc, 0xb8, 0x41, 0xa6, 0x6f, 0x1b, 0xe4, 0xf9, 0x31, 0x14, 0xad, 0x97, 0x40,
	0x8a, 0x30, 0x7f, 0xb0, 0xd3, 0x6a, 0x6f, 0x76, 0x76, 0xda, 0xad, 0xf2, 0x67, 0x04, 0x60, 0xf6,
	0xa8, 0xdd, 0x68, 0xd6, 0xb7, 0xcb, 0x39, 0x32, 0x0f, 0x33, 0xdd, 0x7a, 0xa3, 0xdd, 0x2d, 0x4f,
	0x91, 0x12, 0x40, 0xfb, 0x78, 0xff, 0x7d, 0xa3, 0xb3, 0x53, 0xf7, 0x4e, 0xca, 0x79, 0xb2, 0x08,
	0xc5, 0xdd, 0xc3, 0xb6, 0xd7, 0xad, 0x9f, 0xbc, 0xef, 0x6c, 0xd7, 0xb7, 0xda, 0xe5, 0xe9, 0xda,
	0x3f, 0x73, 0xe0, 0x1c, 0xe1, 0x69, 0x93, 0x46, 0xdb, 0x12, 0x5a, 0xf2, 0x0a, 0xa0, 0x87, 0xb1,
	0xaf, 0xee, 0x9f, 0x90, 0xbb, 0xba, 0x45, 0xad, 0x95, 0xe5, 0x42, 0x35, 0xdd, 0x9b, 0x87, 0x2c,
	0xf0, 0x57, 0x73, 0x23, 0x3b, 0x35, 0x9a, 0xb2, 0x76, 0xc6, 0x3a, 0x9a, 0xb0, 0x7b, 0x03, 0x0b,
	0xd2, 0xce, 0x58, 0x62, 0xc4, 0x9e, 0x3f, 0xf6, 0x1e, 0xb4, 0xed, 0x49, 0x1d, 0xbe, 0xd0, 0x51,
	0x59, 0x64, 0xcf, 0xe9, 0x7b, 0xfa, 0x33, 0xe3, 0xe2, 0x39, 0x14, 0x7a, 0x57, 0x81, 0xe8, 0x5f,
	0xec, 0x33, 0xb9, 0x75, 0x88, 0x75, 0x9a, 0xd1, 0x5d, 0x87, 0x85, 0x2d, 0x14, 0xd6, 0x72, 0xb4,
	0xd5, 0xbf, 0xb6, 0xc2, 0x5a, 0x8a, 0x3f, 0x81, 0xd3, 0x43, 0x31, 0x5a, 0x6c, 0xe4, 0xb1, 0x8d,
	0xac, 0xbd, 0xef, 0x32, 0x61, 0x5f, 0x02, 0x19, 0xa5, 0xd8, 0x0d, 0x2e, 0x31, 0xad, 0x4d, 0xd9,
	0x9e, 0x05, 0x5e, 0x77, 0x02, 0x9b, 0xc5, 0x2d, 0x14, 0xd6, 0xd5, 0x93, 0x4c, 0xba, 0x4f, 0xfe,
	0x1f, 0x25, 0xb5, 0x34, 0x5f, 0x43, 0xa1, 0x87, 0x62, 0xbc, 0xb0, 0xc8, 0xb7, 0x99, 0x57, 0x68,
	0x2f, 0xb2, 0x4c, 0x7c, 0x6d, 0x3c, 0x9e, 0x51, 0x19, 0xe3, 0xec, 0xb8, 0xcb, 0x18, 0xff, 0x00,
	0xc5, 0x9e, 0x60, 0x83, 0x5b, 0xeb, 0xfb, 0xca, 0xf2, 0x16, 0xca, 0x66, 0x24, 0x85, 0xaf, 0xdd,
	0x44, 0xf6, 0x0c, 0xce, 0x98, 0xff, 0x0c, 0x44, 0x02, 0x35, 0xe4, 0x1c, 0x63, 0x31, 0x5e, 0xab,
	0x76, 0xc0, 0xe5, 0xc9, 0x86, 0x1e, 0x6b, 0xbe, 0x01, 0xc7, 0x18, 0x12, 0xc4, 0x9e, 0xd1, 0x93,
	0xe3, 0x23, 0x13, 0xbd, 0x0d, 0x4b, 0xa9, 0x8e, 0xb5, 0x8a, 0x3e, 0x3a, 0x2d, 0x6d, 0x37, 0x8d,
	0x0e, 0x3c, 0x8d, 0x51, 0x98, 0xff, 0xb9, 0xf2, 0x1f, 0xd7, 0x74, 0xf2, 0xdb, 0xb3, 0x87, 0xfd,
	0x52, 0x9f, 0xce, 0xaa, 0x5f, 0xe1, 0x17, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x33, 0x72,
	0xac, 0x8a, 0x0b, 0x00, 0x00,
}
