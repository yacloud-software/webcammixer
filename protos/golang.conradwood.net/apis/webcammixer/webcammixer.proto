syntax = "proto3";

package webcammixer;
option go_package = "golang.conradwood.net/apis/webcammixer";
option java_package = "net.conradwood.apis.webcammixer";
import "golang.conradwood.net/apis/common/common.proto";

// break down one or more images into transportable chunks
message ImageStream {
  bool NextImage=1; // if this changes the current image is finished and a new one starts
  bytes Data=2; // upto 8k of data for this image
}

message VideoDeviceDef {
  string VideoDeviceName=1;
}

// break down one or more frames into transportable chunks
message FrameStream {
  bool NextImage=1; // if this changes the current frame is finished and a new one starts
  bytes Data=2; // upto 8k of data for this frame
}

message LoopbackInfo {
  string DeviceName=1; //e.g. /dev/video2
  uint32 Width=2;
  uint32 Height=3;
  uint32 PixelFormat=4;
}
message IdleTextRequest {
  string Text=1;
}
message URL {
  string URL=1;
}
message CaptureDeviceList {
  repeated CaptureDevice Devices=1;
}
message CaptureDevice {
  string Device=1;
  string Name=2;
  uint32 Type=3;//0-local device, 1=images server
}


message CountdownRequest {
  string Text=1;
  uint32 Seconds=2;    
}
message FrameProvider {
  string HumanReadableDesc=1;
}
// ************************************ chain config ****************************************/
message ChainConfig {
  repeated ChainConverter Converters=1;
}
message ChainConverter {
  string Reference=1;
}

// ************************************ special userimage provider which does a chain of things to modify streams ******/
enum ConverterType {
  UNDEFINED=0;
  WEBCAM=1;
  LABEL=2;
  EXT_BINARY=3;
  OVERLAY_IMAGE=4;
}
message UserImageConverter {
  ConverterType Type=1;
  string Text=2;
  CaptureDevice Device=3;
  OverlayImageRequest OverlayImage=4;
}
message SetTextRequest {
  string Text=1;
}
message UserImageRequest {
  repeated UserImageConverter Converters=1; // it's a chain of things to set up
}
message OverlayImageRequest  {
  uint32 XPos=1;
  uint32 YPos=2;
  bytes Image=3; //e.g.a "png"
}
message DisplayTextRequest {
  bool ContinueCamera=1; // if true allow current (if any) camera to continue showing an image
  uint32 MaxSeconds=2;
  bool Blink=3; // if true blink text ;)
  string Text=4;
}

// feed an image to v4l2loopback
service WebCamMixer {
  // send one or more images to v4l
  rpc SendImages(stream ImageStream) returns (common.Void);
  /*
 send one or more frames (that is images converted to v4l-out format) to v4l
no conversion will be done on this frame.
mostly useful for testing converters
  */ 
  rpc SendFrames(stream FrameStream) returns (common.Void);
  // connect to a LOCAL video device
  rpc SendVideoDevice(VideoDeviceDef) returns (common.Void);
  // connect to any capture source
  rpc SendFromCaptureDevice(CaptureDevice)returns(common.Void);
  // switch to "idle"
  rpc SwitchToIdle(common.Void) returns (common.Void);
  // get loopback config info
  rpc GetLoopbackInfo(common.Void) returns (LoopbackInfo);
  // set idle text
  rpc SetIdleText(IdleTextRequest) returns (common.Void);
  // switch to images-client
  rpc SwitchToLiveImages(URL) returns (common.Void);
  // get list of video devices
  rpc GetCaptureDevices(common.Void) returns(CaptureDeviceList);
  // rpc display a message and countdown
  rpc SetCountdown(CountdownRequest) returns (common.Void);
  // set a text that frequently changes
  rpc SetUserImage(UserImageRequest) returns (common.Void);
  // stop frequently changing stuff, go back to what it was before starting userimage
  rpc StopUserImage(common.Void) returns (common.Void);
  // set a text for dynamic userimage stuff that frequently changes
  rpc SetUserImageText(SetTextRequest) returns (common.Void);
  // get current frameprovider
  rpc GetCurrentProvider(common.Void) returns (FrameProvider);
  // set a dynamic text just for a bit of time, using existing config if possible, e.g. with video overlay. ignored if nobody is watching
  rpc DisplayText(DisplayTextRequest) returns (common.Void);
  // set a dynamic overlay image
  rpc DisplayOverlayImage(OverlayImageRequest) returns (common.Void);
}
